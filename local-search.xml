<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>a</title>
    <link href="/2024/01/27/a/"/>
    <url>/2024/01/27/a/</url>
    
    <content type="html"><![CDATA[<script type="math/tex; mode=display">J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha}</script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>e,phi不互素</title>
    <link href="/2024/01/27/e-phi%E4%B8%8D%E4%BA%92%E7%B4%A0/"/>
    <url>/2024/01/27/e-phi%E4%B8%8D%E4%BA%92%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="强网杯-2022-ASR"><a href="#强网杯-2022-ASR" class="headerlink" title="[强网杯 2022]ASR"></a>[强网杯 2022]ASR</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime  <br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> falg  <br>pad = <span class="hljs-keyword">lambda</span> s:s + <span class="hljs-built_in">bytes</span>([(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">1</span>]*((<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">1</span>))  <br>  <br>n = getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span> * getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span> * getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span> * getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span>  <br>e = <span class="hljs-number">3</span>  <br>  <br>flag = pad(flag)  <br><span class="hljs-built_in">print</span>(flag)  <br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) &gt;= <span class="hljs-number">48</span>)  <br>m = <span class="hljs-built_in">int</span>.from_bytes(flag,<span class="hljs-string">&#x27;big&#x27;</span>)  <br>c = <span class="hljs-built_in">pow</span>(m,e,n)  <br>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br>n = <span class="hljs-number">8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span>  <br>e = <span class="hljs-number">3</span>  <br>c = <span class="hljs-number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span><br></code></pre></td></tr></table></figure><p>这道题n分解出四个数<br>gcd(e,phi)=e<br>发现phi与e不互素<br>需要对有限域开方和利用中国剩余定理<br>将同余方程<br>m^e=c mod n<br>利用中国剩余定理<br>m^e=c mod p<br>m^e=c mod q<br>m^e=c mod r<br>m^e=c mod t<br>再对有限域上开3次方根<br>sage脚本如下</p><ol><li><p><code>R.&lt;x&gt; = Zmod(p)[]</code>: 这一行创建了一个整数模 <code>p</code> 下的多项式环，其中 <code>x</code> 是多项式的变量。</p></li><li><p><code>f = x^e - c</code>: 这一行定义了多项式 <code>f</code>，其形式是 <code>x^e - c</code>。这是一个关于 <code>x</code> 的多项式，其中 <code>e</code> 是公钥中的指数，<code>c</code> 是密文。</p></li><li><p><code>f.monic()</code>: 这一步将多项式转换为首项系数为 1 的首一多项式（monic polynomial）。这是因为在多项式的根的计算中，首项系数不影响根的值。</p></li><li><p><code>results1 = f.monic().roots()</code>: 这一步计算了首一多项式 <code>f</code> 在模 <code>p</code> 下的所有根，并将结果存储在 <code>results1</code> 中。<code>roots()</code> 方法返回一个列表，其中每个元素都是一个包含根和它的重数的元组。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span>  <br>e = <span class="hljs-number">3</span>  <br>c = <span class="hljs-number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span>  <br>p = <span class="hljs-number">225933944608558304529179430753170813347</span>  <br>q = <span class="hljs-number">260594583349478633632570848336184053653</span>  <br>r = <span class="hljs-number">218566259296037866647273372633238739089</span>  <br>t = <span class="hljs-number">223213222467584072959434495118689164399</span>  <br>  <br>R.&lt;x&gt; = Zmod(p)[]  <br>f = x^e-c  <br>results1 = f.monic().roots() <span class="hljs-comment">#计算了多项式 `f` 在这个有限域上的根 </span><br>  <br>R.&lt;x&gt; = Zmod(q)[]  <br>f = x^e-c   <br>results2 = f.monic().roots()  <br>  <br>R.&lt;x&gt; = Zmod(r)[]  <br>f = x^e-c    <br>results3 = f.monic().roots()<br>  <br>R.&lt;x&gt; = Zmod(t)[]  <br>f = x^e-c <br>results4 = f.monic().roots()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> results1:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> results2:<br>        <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> results3:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> results4:<br>                m = crt([<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(j[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(l[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(k[<span class="hljs-number">0</span>])],[p,q,r,t])<br>                flag = long_to_bytes(<span class="hljs-built_in">int</span>(m))<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span>  <span class="hljs-keyword">in</span> flag:<br>                    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment">#flag&#123;Fear_can_hold_you_prisoner_Hope_can_set_you_free&#125;</span><br><br></code></pre></td></tr></table></figure><h1 id="相关拓展"><a href="#相关拓展" class="headerlink" title="相关拓展"></a>相关拓展</h1><p>e较小 </p><p>1.$m^t$&lt; n</p><p>t = gcd(e,phi)<br>e’ = e//t<br>d = gmpy2.invert(e’,phi)</p><script type="math/tex; mode=display">(m^{t})^{e'} \equiv c \pmod{n}</script><script type="math/tex; mode=display">m^{t} \equiv c^{d} \pmod{n}</script><p>$m^t$&lt; n<br>即直接对m^t进行开t次方根即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2  <br><span class="hljs-keyword">import</span> libnum  <br>p = <span class="hljs-number">9927950299160071928293508814174740578824022211226572614475267385787727188317224760986347883270504573953862618573051241506246884352854313099453586586022059</span>  <br>q = <span class="hljs-number">9606476151905841036013578452822151891782938033700390347379468858357928877640534612459734825681004415976431665670102068256547092636766287603818164456689343</span>  <br>e = <span class="hljs-number">131074</span>  <br>c = <span class="hljs-number">68145285629092005589126591120307889109483909395989426479108244531402455690717006058397784318664114589567149811644664654952286387794458474073250495807456996723468838094551501146672038892183058042546944692051403972876692350946611736455784779361761930869993818138259781995078436790236277196516800834433299672560</span>  <br>  <br>n = p * q  <br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)  <br>gcd1 = gmpy2.gcd(e, phi)  <br><span class="hljs-built_in">print</span>(gcd1)  <br>t1 = e // gcd1  <br>dt = gmpy2.invert(t1, phi)  <br>m_gcd1 = gmpy2.powmod(c, dt, n)  <br>m = gmpy2.iroot(m_gcd1, gcd1) <span class="hljs-comment"># 得到元组 (mpz(1920535408007397829480400151650246901210634018403879187581), True)</span><br>flag = libnum.n2s(<span class="hljs-built_in">int</span>(m[<span class="hljs-number">0</span>]))  <br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure></p><p>2.$m^{t}$ &gt; n</p><p>这种情况需要结合中国剩余定理求解，由于$m^{t}$ &gt; n，就不能再单纯地用第一种方法，应该尝试在有限域内开根，就是上面的例题</p><p>3.AMM</p><p>AMM 算法在 RSA 中适用于指数 e 整除 phi 的情况，也就是说 phi % e == 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes<br><br><span class="hljs-comment"># 设置模数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GF</span>(<span class="hljs-params">a</span>):<br><br>    <span class="hljs-keyword">global</span> p<br><br>    p = a<br><br><br><span class="hljs-comment"># 乘法取模</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">a, b</span>):<br><br>    <span class="hljs-keyword">global</span> p<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(a, b, p)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AMM</span>(<span class="hljs-params">x, e, p</span>):<br><br>    GF(p)<br><br>    y = random.randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">while</span> g(y, (p - <span class="hljs-number">1</span>) // e) == <span class="hljs-number">1</span>:<br><br>        y = random.randint(<span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br><br>        <span class="hljs-built_in">print</span>(y)<br><br>    <span class="hljs-comment"># p-1 = e^t*s</span><br><br>    t = <span class="hljs-number">1</span><br><br>    s = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">while</span> p % e == <span class="hljs-number">0</span>:<br><br>        t += <span class="hljs-number">1</span><br><br>        <span class="hljs-built_in">print</span>(t)<br><br>    s = p // (e ** t)<br><br>    <span class="hljs-comment"># s|ralpha-1</span><br><br>    k = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> ((s * k + <span class="hljs-number">1</span>) % e != <span class="hljs-number">0</span>):<br><br>        k += <span class="hljs-number">1</span><br><br>    alpha = (s * k + <span class="hljs-number">1</span>) // e<br><br>    <span class="hljs-comment"># 计算a = y^s b = x^s h =1</span><br><br>    <span class="hljs-comment"># h为e次非剩余部分的积</span><br><br>    a = g(y, (e ** (t - <span class="hljs-number">1</span>)) * s)<br><br>    b = g(x, e * alpha - <span class="hljs-number">1</span>)<br><br>    c = g(y, s)<br><br>    h = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, t - <span class="hljs-number">1</span>):<br><br>        d = g(b, e ** (t - <span class="hljs-number">1</span> - i))<br><br>        <span class="hljs-keyword">if</span> d == <span class="hljs-number">1</span>:<br><br>            j = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">else</span>:<br><br>            j = -math.log(d, a)<br><br>        b = b * (g(g(c, e), j))<br><br>        h = h * g(c, j)<br><br>        c = g(c, e)<br><br>    <span class="hljs-comment"># return (g(x, alpha * h)) % p</span><br><br>    root = (g(x, alpha * h)) % p<br><br>    roots = <span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(e):<br><br>        mp2 = root * g(a, i) % p<br><br>        <span class="hljs-comment"># assert(g(mp2, e) == x)</span><br><br>        roots.add(mp2)<br><br>    <span class="hljs-keyword">return</span> roots<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">m</span>):<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> m:<br><br>        <span class="hljs-built_in">print</span>(m)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">else</span>:<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>e = <span class="hljs-number">997</span><br><br>p = <span class="hljs-number">169192804045017094881483391290948160084538928031716323749363864952453968973507689162051165395748104110078160856791051809212190939432475142974911541618441458487669050818296365973889691415623806933502603345031427784795571665740530721508383685794846991682950112717404480456329219127191697671498037366841158723543</span><br><br>q = <span class="hljs-number">107516396467746261711633898678341416690878446946218041251896502835689317784482747676107795221812916591321630759086326505565275611515776242892889358779953138176525964380991025435521861396436904104071935067377647496422254521013295763929078451759522826104921925202219553793049032407587608850233803508977340633609</span><br><br>c = <span class="hljs-number">2267013583982118529689961589311244453681131237290129895037423342591513560919727257614055527360882173152373622086351781724093468283957160227494201024313344592585769301566197130646556368363060289333739227741799045175612897707171515961542493558906010781363185952153935175857299861709649231811101542417497183158188048584049904887640857973721010013925357024904858507338110307489970957786714532487345291869970116268264303921502658449209315499885663119341031052658911450838803774558077494523659391710066809280254471300138959425884150833555907855686698475577766387748205229101141571416759548504290647432180699055808985095526</span><br><br><br><br>mps = AMM(c, e, q)<br><br><span class="hljs-comment"># print(mps)</span><br><br><span class="hljs-keyword">for</span> mpp <span class="hljs-keyword">in</span> mps:<br><br>    solution = <span class="hljs-built_in">str</span>(long_to_bytes(mpp))<br><br>    <span class="hljs-keyword">if</span> check(solution):<br><br>        <span class="hljs-built_in">print</span>(solution)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DSA与RSA</title>
    <link href="/2024/01/24/DSA%E4%B8%8ERSA/"/>
    <url>/2024/01/24/DSA%E4%B8%8ERSA/</url>
    
    <content type="html"><![CDATA[<p>在用 ssh-keygen 生成密钥对时，通常会面临是使用RSA还是DSA的选择：RSA or DSA, this is a question! 今天在这里分析一下：</p><p>原理与安全性</p><pre><code class="hljs">RSA 与 DSA 都是非对称加密算法。其中RSA的安全性是基于极其困难的大整数的分解（两个素数的乘积）；DSA 的安全性是基于整数有限域离散对数难题。基本上可以认为相同密钥长度的 RSA 算法与 DSA 算法安全性相当。有点要注意，RSA 的安全性依赖于大数分解，但是否等同于大数分解一直未能得到理论上的证明，因为没有证明破解 RSA 就一定需要作大数分解。不过也不必太过担心，RSA 从诞生以来，经历了各种攻击，至今未被完全攻破（依靠暴力破解，小于1024位密钥长度的 RSA 有被攻破的记录，但未从算法上被攻破）。</code></pre><p>用途：</p><pre><code class="hljs">DSA 只能用于数字签名，而无法用于加密（某些扩展可以支持加密）；RSA 即可作为数字签名，也可以作为加密算法。不过作为加密使用的 RSA 有着随密钥长度增加，性能急剧下降的问题。</code></pre><p>性能：</p><pre><code class="hljs">相同密钥长度下，DSA 做签名时速度更快，但做签名验证时速度较慢，一般情况验证签名的次数多于签名的次数。相同密钥长度下，DSA （在扩展支持下）解密密文更快，而加密更慢；RSA 正好反过来，一般来说解密次数多于加密次数。不过由于非对称加密算法的先天性能问题，两者都不是加密的好选择。</code></pre><p>业界支持：</p><pre><code class="hljs">在业界支持方面，RSA 显然是赢家。RSA 具有更为广泛的部署与支持。</code></pre><p>使用 ssh-keygen 时的选择：</p><pre><code class="hljs">上面说了那么多，可以看到RSA 与 DSA 各有优缺点。回到开头的问题，在使用 ssh-keygen 时，RSA 与 DSA到底选哪个？ 比较有意思的是，这个问题最终答案与上面那些优缺点无关。虽然理论上可以生成更长长度的 DSA 密钥 （NIST FIPS 186-3），但ssh-keygen在生成 DSA 密钥时，其长度只能为1024位（基于NIST FIPS 186-2）；而 ssh-keygen 在 RSA 的密钥长度上没有限制。 由于小于1024位密钥长度的 RSA 已经有被攻破的记录，所以说现在：RSA 2048 位密钥是更好的选择。</code></pre><p>其它选择：</p><pre><code class="hljs">RSA 与 DSA 各有优缺点，那有没一个更好的选择呢？答案是肯定的，ECC（Elliptic Curves Cryptography）：椭圆曲线算法。ECC 与 RSA 相比，有以下的优点：  </code></pre><p>（1）相同密钥长度下，安全性能更高，如160位ECC已经与1024位RSA、DSA有相同的安全强度。<br>（2）计算量小，处理速度快，在私钥的处理速度上（解密和签名），ECC远 比RSA、DSA快得多。<br>（3）存储空间占用小 ECC的密钥尺寸和系统参数与RSA、DSA相比要小得多， 所以占用的存储空间小得多。<br>（4）带宽要求低使得ECC具有广泛得应用前景。</p><pre><code class="hljs">在 ssh-keygen 中，ECC 算法的相应参数是 “-t ecdsa”。可惜的是由于椭圆曲线算法只有在较新版本的 openssl 与 ssh-keygen 中才被支持，而无法得到普遍使用而去完全替代 RSA/DSA。不过由于椭圆曲线算法的优点，使其取代 RSA/DSA 而成为新一代通用的非对称加密算法成为可能，至少 SET 协议的制定者们已经把它作为下一代 SET 协议中缺省的公钥密码算法了。</code></pre><p><a href="http://blog.sina.com.cn/s/blog_6f31085901015agu.html">链接</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sagemath整理</title>
    <link href="/2024/01/20/sagemath/"/>
    <url>/2024/01/20/sagemath/</url>
    
    <content type="html"><![CDATA[<p>看了很多大佬的博客整理的</p><h2 id="sagemath与python的不同"><a href="#sagemath与python的不同" class="headerlink" title="sagemath与python的不同"></a>sagemath与python的不同</h2><figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs parser3"><span class="language-xml">x**y</span><br><span class="language-xml"></span><span class="hljs-comment">#均表示幂</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">x</span><span class="hljs-keyword">^y</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-comment">#sage中表示幂，python中是异或</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">x^</span><span class="hljs-keyword">^y</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-comment">#sage中合法且表示异或</span><br></code></pre></td></tr></table></figure><h2 id="环和域"><a href="#环和域" class="headerlink" title="环和域"></a>环和域</h2><p>整数环，ZZ</p><p>有理数环，QQ</p><p>实数域，RR</p><p>负数域，CC</p><p>多项式环，PolynomialRing()</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">PR</span>.&lt;<span class="hljs-variable">x</span>&gt; = <span class="hljs-function"><span class="hljs-title">PolynomialRing</span>(<span class="hljs-title">Zmod</span>(<span class="hljs-variable">N</span>))</span><br></code></pre></td></tr></table></figure><p>创建了一个mod n下的多项式，名为PR，并设有一个未知数x</p><h2 id="相关的算法"><a href="#相关的算法" class="headerlink" title="相关的算法"></a>相关的算法</h2><p>求逆元： inverse_mod(x,n)   （下了gmpy2库，就还可以用gmpy2.invert(e,phi))</p><p>阶乘: factorial(x)</p><p>求欧拉函数： euler_phi(n)</p><p>中国剩余定理求解: crt([m1,m2],[n1,n2])</p><p>分解素数：factor()</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>定义矩阵</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">A = matrix(Zmod(2),[[1,2,3],[3,2,1],[1,1,1]])<br>print(A)<br>&#x27;&#x27;&#x27;<br><span class="hljs-meta">[1 0 1]</span><br><span class="hljs-meta">[1 0 1]</span><br><span class="hljs-meta">[1 1 1]</span><br>&#x27;&#x27;&#x27;<br><br>B = matrix(GF(2),A)<br>print(B)<br>&#x27;&#x27;&#x27;<br><span class="hljs-meta">[1 0 1]</span><br><span class="hljs-meta">[1 0 1]</span><br><span class="hljs-meta">[1 1 1]</span><br>&#x27;&#x27;&#x27;<br><br>m = matrix(GF(2),3,3)<br>print(m)<br>#定义3x3初始化矩阵，默认0<br><br></code></pre></td></tr></table></figure><p>定义向量</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs leaf">Y = vector(ZZ,[0,-4,-1])<br>print(Y)<br><span class="hljs-punctuation">#</span><span class="hljs-params">(0,<span class="hljs-operator">-</span>4,<span class="hljs-operator">-</span>1)</span><br><br>Y = vector(GF(2),[0,-4,-1])<br>print(Y)<br><span class="hljs-punctuation">#</span><span class="hljs-params">(0,0,1)</span><br></code></pre></td></tr></table></figure><h2 id="创建多项式环"><a href="#创建多项式环" class="headerlink" title="创建多项式环"></a>创建多项式环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sagemath">R.&lt;x&gt; = PloynomialRing(QQ)<br></code></pre></td></tr></table></figure><h2 id="多元多项式"><a href="#多元多项式" class="headerlink" title="多元多项式"></a>多元多项式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sagemath">R.&lt;s0, s1, s2&gt; = PolynomialRing(QQ,3)<br>I = ideal(s0 + s1 + s2 - s, s0^e - c0, s1^17 - c1, s2^17 - c2)<br>s = I.groebner_basis()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
