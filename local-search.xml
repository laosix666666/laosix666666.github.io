<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>反馈移位寄存器</title>
    <link href="/2024/03/01/%E5%8F%8D%E9%A6%88%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <url>/2024/03/01/%E5%8F%8D%E9%A6%88%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>LFSR是属于FSR（反馈移位寄存器）的一种，除了LFSR之外，还包括NFSR（非线性反馈移位寄存器）。</p><p>FSR是<strong>流密码</strong>产生<strong>密钥流</strong>的一个重要组成部分，在GF(2)上的一个<strong>n级FSR</strong>通常由<strong>n个二元存储器</strong>和<strong>一个反馈函数</strong>组成，如下图所示：</p><p><img src="https://p5.ssl.qhimg.com/t0120111c3c2c65ad47.png" alt=""></p><p>如果这里的反馈函数是<strong>线性</strong>的，我们则将其称为LFSR，此时该反馈函数可以表示为：</p><p><img src="https://p3.ssl.qhimg.com/t01e60ae90ce8d0f7da.png" alt=""></p><p>其中ci=0或1，⊕表示异或（模二加）。</p><p>我们接下来通过一个例子来更直观的明确LFSR的概念，假设给定一个<strong>5级</strong>的LFSR，其初始状态（即a1到a5这5个二元存储器的值）为：</p><p><img src="https://p4.ssl.qhimg.com/t0136009fbc340cd9cf.png" alt=""></p><p>其反馈函数为：</p><p><img src="https://p1.ssl.qhimg.com/t017c5158f64d590cd2.png" alt=""></p><p>整个过程可以表示为下图所示的形式：</p><p><img src="https://p3.ssl.qhimg.com/t01cd58532501574579.png" alt=""></p><p>接下来我们来计算该LFSR的输出序列，输出序列的<strong>前5位</strong>即为我们的初始状态<strong>10011</strong>，<strong>第6位</strong>的计算过程如下:</p><p><img src="https://p3.ssl.qhimg.com/t019ca3ed0fa053d582.png" alt=""></p><p><strong>第7位</strong>的计算过程如下:</p><p><img src="https://p0.ssl.qhimg.com/t01ca7d030e872490ec.png" alt=""></p><p>由此类推，可以得到<strong>前31位</strong>的计算结果如下：</p><p><code>1001101001000010101110110001111</code></p><p>对于一个n级的LFSR来讲，其<strong>最大周期</strong>为2^n-1，因此对于我们上面的5级LFSR来讲，其<strong>最大周期</strong>为2^5-1=31，再后面的输出序列即为前31位的循环。</p><p>2018 CISCN 线上赛 oldstreamgame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&quot;flag&#123;xxxxxxxxxxxxxxxx&#125;&quot;</span><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;flag&#123;&quot;</span>)<br><span class="hljs-keyword">assert</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">14</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit <br>    <span class="hljs-keyword">return</span> (output,lastbit)<br><br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>mask = <span class="hljs-number">0b10100100000010000000100010010100</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp))<br>f.close()<br></code></pre></td></tr></table></figure><p>分析一下我们的已知条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">已知初始状态的长度为4个十六进制数，即32位，初始状态的值即我们要去求的flag。<br>已知反馈函数，只不过这里的反馈函数是代码的形式，我们需要提取出它的数学表达式。<br>已知输出序列。<br></code></pre></td></tr></table></figure><p>那么我们的任务很明确，就是通过分析lfsr函数，整理成数学表达式的形式求解即可，接下来我们一行一行的来分析这个函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">#接收两个参数，R是<span class="hljs-number">32</span>位的初始状态(即flag)，<span class="hljs-attribute">mask</span>是<span class="hljs-number">32</span>位的掩码，由于<span class="hljs-attribute">mask</span>已知，所以我们就直接把他当做一个常数即可。<br>def <span class="hljs-built_in">lfsr</span>(R,mask):<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#把R左移一位后低32位（即抹去R的最高位，然后在R的最低位补0）的值赋给output变量。</span><br>    <span class="hljs-attr">output</span> = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0</span>xffffffff<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#把传入的R和mask做按位与运算，运算结果取低32位，将该值赋给i变量。</span><br>    <span class="hljs-attr">i</span>=(R&amp;mask)&amp;<span class="hljs-number">0</span>xffffffff<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从i的最低位向i的最高位依次做异或运算，将运算结果赋给lastbit变量。</span><br>    lastbit=0<br>    <span class="hljs-keyword">while</span> i!=0:<br>        lastbit^=(i&amp;1)<br>        i=i&gt;&gt;1<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`i&amp;<span class="hljs-number">1</span>` 是一个位与运算操作，用来提取一个数 `i` 的二进制表示中的最后一位（即最低位）。在这个操作中，`&amp;` 是位与运算符，`1` 是一个只有最低位为 <span class="hljs-number">1</span>，其他位均为 <span class="hljs-number">0</span> 的数。当对 `i` 进行与运算时，只有 `i` 的最后一位与 `1` 的最后一位相与，结果为 `1`（如果 `i` 的最后一位是 <span class="hljs-number">1</span>）或 `0`（如果 `i` 的最后一位是 <span class="hljs-number">0</span>）。<br><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">#将<span class="hljs-built_in">output</span>变量的最后一位设置成lastbit变量的值。<br>    <span class="hljs-built_in">output</span>^=lastbit<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">#返回<span class="hljs-built_in">output</span>变量和lastbit变量的值，<span class="hljs-built_in">output</span>即经过一轮lfsr之后的新序列，lastbit即经过一轮lfsr之后输出的一位。<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">output</span>,lastbit)<br></code></pre></td></tr></table></figure><p>通过上面的分析，我们可以看出在这道题的情境下，lfsr函数本质上就是一个<strong>输入R输出lastbit的函数</strong>，虽然我们现在已经清楚了<strong>R是如何经过一系列运算得到lastbit</strong>的，但是我们前面的反馈函数都是<strong>数学表达式</strong>的形式，我们能否将上述过程整理成一个表达式的形式呢？这就需要我们再进一步进行分析：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">mask</span>只有第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位为<span class="hljs-number">1</span>，其余位均为<span class="hljs-number">0</span>。<br><span class="hljs-attribute">mask</span>与R做按位与运算得到<span class="hljs-selector-tag">i</span>，当且仅当R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位中也出现<span class="hljs-number">1</span>时，<span class="hljs-selector-tag">i</span>中才可能出现<span class="hljs-number">1</span>，否则<span class="hljs-selector-tag">i</span>中将全为<span class="hljs-number">0</span>。<br>lastbit是由<span class="hljs-selector-tag">i</span>的最低位向<span class="hljs-selector-tag">i</span>的最高位依次做异或运算得到的，在这个过程中，所有为<span class="hljs-number">0</span>的位我们可以忽略不计（因为<span class="hljs-number">0</span>异或任何数等于任何数本身，不影响最后运算结果），因此lastbit的值仅取决于<span class="hljs-selector-tag">i</span>中有多少个<span class="hljs-number">1</span>：当<span class="hljs-selector-tag">i</span>中有奇数个<span class="hljs-number">1</span>时，lastbit等于<span class="hljs-number">1</span>；当<span class="hljs-selector-tag">i</span>中有偶数个<span class="hljs-number">1</span>时，lastbit等于<span class="hljs-number">0</span>。<br>当R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位依次异或结果为<span class="hljs-number">1</span>时，即R中有奇数个<span class="hljs-number">1</span>，因此将导致<span class="hljs-selector-tag">i</span>中有奇数个<span class="hljs-number">1</span>；当R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位依次异或结果为<span class="hljs-number">0</span>时，即R中有偶数个<span class="hljs-number">1</span>，因此将导致<span class="hljs-selector-tag">i</span>中有偶数个<span class="hljs-number">1</span>。<br>因此我们可以建立出联系：lastbit等于R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位依次异或的结果。<br></code></pre></td></tr></table></figure><p>将其写成数学表示式的形式，即为：</p><p><img src="https://p3.ssl.qhimg.com/t01146bab15730cbd30.png" alt=""></p><p>显然，lastbit和R之间满足线性关系，那么接下来我们就可以开始求解了：</p><p>我们想象这样一个场景，当即将输出第32位lastbit时，此时R已经左移了31位，根据上面的数学表达式，我们有：</p><p><img src="https://p2.ssl.qhimg.com/t0100384766078bfda8.png" alt=""></p><p>这样我们就可以求出R的第1位，同样的方法，我们可以求出R的第2位：</p><p><img src="https://p4.ssl.qhimg.com/t01ef3d957b4726b14c.png" alt=""></p><p>以此类推，R的全部32位我们都可以依次求出了，将这一计算过程写成代码形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">mask = <span class="hljs-string">&#x27;10100100000010000000100010010100&#x27;</span><br>key = <span class="hljs-string">&#x27;00100000111111011110111011111000&#x27;</span><br>tmp = key<br>R= <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    output = <span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>    ans = <span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">3</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">5</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">12</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">20</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">27</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">30</span>])<br>    R+=<span class="hljs-built_in">str</span>(ans)<br>    key = <span class="hljs-built_in">str</span>(ans)+key[:<span class="hljs-number">31</span>]<br>R= <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(R[::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;x&#x27;</span>)<br>flag = <span class="hljs-string">&#x27;flag&#123;&#x27;</span>+R+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag{926201d7}</p><h2 id="2018-強網杯-Streamgame2"><a href="#2018-強網杯-Streamgame2" class="headerlink" title="2018 強網杯 Streamgame2"></a>2018 強網杯 Streamgame2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;flag&#123;&quot;</span>)<br><span class="hljs-keyword">assert</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">27</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br><br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)<br>mask=<span class="hljs-number">0x100002</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;ab&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp))<br>f.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#bin_out = open(&#x27;key.txt&#x27;,&#x27;rb&#x27;).read()</span><br><span class="hljs-comment">#key = bin(bytes_to_long(bin_out))[2:]</span><br><br>key = <span class="hljs-string">&#x27;101100101110100100001&#x27;</span><br>mask= <span class="hljs-string">&#x27;100000000000000000010&#x27;</span><br><br>R = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>    output = <span class="hljs-string">&#x27;?&#x27;</span> + key[:<span class="hljs-number">20</span>]<br>    ans = <span class="hljs-built_in">int</span>(key[-<span class="hljs-number">1</span>]) ^ <span class="hljs-built_in">int</span>(output[-<span class="hljs-number">2</span>])<br>    R += <span class="hljs-built_in">str</span>(ans)<br>    key = <span class="hljs-built_in">str</span>(ans) + key[:<span class="hljs-number">20</span>]<br><br><span class="hljs-built_in">print</span>(R[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
