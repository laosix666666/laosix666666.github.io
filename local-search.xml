<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pohlig-Hellman算法</title>
    <link href="/2024/04/12/Pohlig-Hellman%E7%AE%97%E6%B3%95/"/>
    <url>/2024/04/12/Pohlig-Hellman%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.ruanx.net/pohlig-hellman/">大步小步</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">R</span> = GF(<span class="hljs-number">941</span>)<br><span class="hljs-built_in">h</span> = <span class="hljs-built_in">R</span>(<span class="hljs-number">390</span>)<br>g = <span class="hljs-built_in">R</span>(<span class="hljs-number">627</span>)<br>x = discrete_log(<span class="hljs-built_in">h</span>, g)  <span class="hljs-comment"># 347</span><br>assert g**x == <span class="hljs-built_in">h</span><br><br><span class="hljs-comment"># 另一种方法</span><br>x = h.log(g)  <span class="hljs-comment"># 347</span><br>assert g**x == <span class="hljs-built_in">h</span><br><br></code></pre></td></tr></table></figure><h2 id="Crypto2022CTF"><a href="#Crypto2022CTF" class="headerlink" title="Crypto2022CTF"></a>Crypto2022CTF</h2><p><a href="https://blog.csdn.net/m0_62506844/article/details/125774485">RSA p+1或p-1光滑</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_primes</span>(<span class="hljs-params">nbit, imbalance</span>):<br>    p = <span class="hljs-number">2</span><br>    FACTORS = [p]<br>    <span class="hljs-keyword">while</span> p.bit_length() &lt; nbit - <span class="hljs-number">2</span> * imbalance:<br>        factor = getPrime(imbalance)<br>        FACTORS.append(factor)<br>        p *= factor<br>    rbit = (nbit - p.bit_length()) // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r, s = [getPrime(rbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;01&#x27;</span>]<br>        _p = p * r * s<br>        <span class="hljs-keyword">if</span> _p.bit_length() &lt; nbit: rbit += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> _p.bit_length() &gt; nbit: rbit -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(_p + <span class="hljs-number">1</span>):<br>            FACTORS.extend((r, s))<br>            p = _p + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br><br>    FACTORS.sort()<br>    <span class="hljs-keyword">return</span> (p, FACTORS)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genkey</span>(<span class="hljs-params">nbit, imbalance, e</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p, FACTORS = gen_primes(nbit // <span class="hljs-number">2</span>, imbalance)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(FACTORS) != <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(FACTORS)):<br>            <span class="hljs-keyword">continue</span><br>        q, q_factors = gen_primes(nbit // <span class="hljs-number">2</span>, imbalance + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q_factors) != <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(q_factors)):<br>            <span class="hljs-keyword">continue</span><br>        factors = FACTORS + q_factors<br>        <span class="hljs-keyword">if</span> e <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> factors:<br>            <span class="hljs-keyword">break</span><br>    n = p * q<br>    <span class="hljs-keyword">return</span> n, (p, q)<br><br><br>nbit = <span class="hljs-number">2048</span><br>imbalance = <span class="hljs-number">19</span><br>e = <span class="hljs-number">0x10001</span><br><br>m_1 = bytes_to_long(flag[:<span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">2</span>])<br>m_2 = bytes_to_long(flag[<span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">2</span>:])<br><br>n, PRIMES = genkey(nbit, imbalance, e)<br><br>c_1 = <span class="hljs-built_in">pow</span>(m_1, e, n)<br>c_2 = <span class="hljs-built_in">pow</span>(e, m_2, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c_1 = <span class="hljs-subst">&#123;c_1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c_2 = <span class="hljs-subst">&#123;c_2&#125;</span>&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 7069789930583271525053215046247773438899869283661158227309691853515987055334306019600324056376312479212090202373516405860759222837585952590589336295698718699890424169542280710721069784487366121478569760563045886361884895363592898476736269784284754788133722060718026577238640218755539268465317292713320841554802703379684173485217045274942603346947299152498798736808975912326592689302969859834957202716983626393365387411319175917999258829839695189774082810459527737342402920881184864625678296442001837072332161966439361793009893108796934406114288057583563496587655548536011677451960307597573257032154009427010069578913</span><br><span class="hljs-string">c_1 = 488692928085934899944055554857568564903346089951134051486941368561567330884363274156339625953702601270565654444836193796061118053575538224794730472032345171432952984560662218697488844007827176184413713651118743456250147472678673801728916283759932987216388378211555067885210167894310696549664382751443669387953644382833924884208966436685137553434532738845959014828804809425096115758364136546390809453200055265653531950423111482644330073443545410319576097902472017235065047191133112557289289189187696092145850680765843608118584107829268136014912479701945735063525799796920293418182776436767911172221104640501952880057</span><br><span class="hljs-string">c_2 = 109770827223661560471527567179288748906402603483328748683689436879660543465776899146036833470531024202351087008847594392666852763100570391337823820240726499421306887565697452868723849092658743267256316770223643723095601213088336064635680075206929620159782416078143076506249031972043819429093074684182845530529249907297736582589125917235222921623698038868900282049587768700860009877737045693722732170123306528145661683416808514556360429554775212088169626620488741903267154641722293484797745665402402381445609873333905772582972140944493849645600529147490903067975300304532955461710562911203871840101407995813072692212</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>第一步利用Pollard‘s p-1方法分解n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>N = <span class="hljs-number">7069789930583271525053215046247773438899869283661158227309691853515987055334306019600324056376312479212090202373516405860759222837585952590589336295698718699890424169542280710721069784487366121478569760563045886361884895363592898476736269784284754788133722060718026577238640218755539268465317292713320841554802703379684173485217045274942603346947299152498798736808975912326592689302969859834957202716983626393365387411319175917999258829839695189774082810459527737342402920881184864625678296442001837072332161966439361793009893108796934406114288057583563496587655548536011677451960307597573257032154009427010069578913</span><br>a = <span class="hljs-number">2</span><br>n = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    a =<span class="hljs-built_in">pow</span>(a,n,N)<br>    res =gmpy2.gcd(a-<span class="hljs-number">1</span>,N)<br>    <span class="hljs-keyword">if</span> res!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> res!=N:<br>        q = N//res<br>        <span class="hljs-built_in">print</span>(res)<br>        <span class="hljs-built_in">print</span>(q)<br>        <span class="hljs-keyword">break</span> <br>    n+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>其后，考察离散对数</p><p>根据p、q光滑的性质与flag大小关系，可简化运算</p><p>可以先分别求出<svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.652ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5592.2 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D452" xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mn" transform="translate(911,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g><g data-mml-node="mspace" transform="translate(1478.5,0)"></g><g data-mml-node="mo" transform="translate(1922.5,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2311.5,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mspace" transform="translate(4200.5,0)"></g><g data-mml-node="mi" transform="translate(4700.2,0)"><use data-c="1D45D" xlink:href="#MJX-1-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(5203.2,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg>与<svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.555ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5549.2 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D452" xlink:href="#MJX-2-TEX-I-1D452"></use></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mn" transform="translate(911,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"></use></g></g></g></g><g data-mml-node="mspace" transform="translate(1478.5,0)"></g><g data-mml-node="mo" transform="translate(1922.5,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(2311.5,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mspace" transform="translate(4200.5,0)"></g><g data-mml-node="mi" transform="translate(4700.2,0)"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="mo" transform="translate(5160.2,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g></g></g></svg>的值，再CRT求出<svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.974ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1314.6 592" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-3-TEX-I-1D45A"></use></g><g data-mml-node="mn" transform="translate(911,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g></g></g></g></svg></p><p>直接mod n,数大</p><p>也观察到，对比特位而言p&gt;m2=m1，所以有<svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.169ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9798.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-4-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-4-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-4-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-4-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-4-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-4-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-4-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-4-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-4-TEX-I-1D45A"></use></g><g data-mml-node="mn" transform="translate(911,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(1592.3,0)"><use data-c="3D" xlink:href="#MJX-4-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2648.1,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-4-TEX-I-1D45A"></use></g><g data-mml-node="mn" transform="translate(911,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"></use></g></g><g data-mml-node="mspace" transform="translate(3962.7,0)"></g><g data-mml-node="mo" transform="translate(4406.7,0)"><use data-c="28" xlink:href="#MJX-4-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4795.7,0)"><use data-c="6D" xlink:href="#MJX-4-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-4-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-4-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mspace" transform="translate(6684.7,0)"></g><g data-mml-node="mi" transform="translate(7184.3,0)"><use data-c="1D45D" xlink:href="#MJX-4-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(7909.6,0)"><use data-c="2212" xlink:href="#MJX-4-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8909.8,0)"><use data-c="31" xlink:href="#MJX-4-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(9409.8,0)"><use data-c="29" xlink:href="#MJX-4-TEX-N-29"></use></g></g></g></svg>, 无需CRT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sage">**from Crypto.Util.number import *<br><br>N = 7069789930583271525053215046247773438899869283661158227309691853515987055334306019600324056376312479212090202373516405860759222837585952590589336295698718699890424169542280710721069784487366121478569760563045886361884895363592898476736269784284754788133722060718026577238640218755539268465317292713320841554802703379684173485217045274942603346947299152498798736808975912326592689302969859834957202716983626393365387411319175917999258829839695189774082810459527737342402920881184864625678296442001837072332161966439361793009893108796934406114288057583563496587655548536011677451960307597573257032154009427010069578913<br>c_1 = 488692928085934899944055554857568564903346089951134051486941368561567330884363274156339625953702601270565654444836193796061118053575538224794730472032345171432952984560662218697488844007827176184413713651118743456250147472678673801728916283759932987216388378211555067885210167894310696549664382751443669387953644382833924884208966436685137553434532738845959014828804809425096115758364136546390809453200055265653531950423111482644330073443545410319576097902472017235065047191133112557289289189187696092145850680765843608118584107829268136014912479701945735063525799796920293418182776436767911172221104640501952880057<br>c_2 = 109770827223661560471527567179288748906402603483328748683689436879660543465776899146036833470531024202351087008847594392666852763100570391337823820240726499421306887565697452868723849092658743267256316770223643723095601213088336064635680075206929620159782416078143076506249031972043819429093074684182845530529249907297736582589125917235222921623698038868900282049587768700860009877737045693722732170123306528145661683416808514556360429554775212088169626620488741903267154641722293484797745665402402381445609873333905772582972140944493849645600529147490903067975300304532955461710562911203871840101407995813072692212<br>e = 65537<br><br>p = 83408372012221120677052349409462320990177094246143674474872152829440524098582262384066400107950985845255268335597502228206679771838750219696329523257176739436871327238322817403970284015587320158034304282786944710043150568360761457471641695390427267786485448748458445872307883254297662715749746270343116946519<br><br>q = N // p<br><br>Zp, Zq = Zmod(p), Zmod(q)<br>d = inverse_mod(e, (p-1)*(q-1))<br>m_1 = int(pow(c_1, d, N))<br>print(long_to_bytes(m_1).decode(),end=&#x27;&#x27;)<br><br>m_2p = discrete_log(Zp(c_2), Zp(e))<br># m_2q = discrete_log(Zq(c_2), Zq(e))<br># m_2 = crt([m_2p, m_2q], [p-1, q-1])<br>print(long_to_bytes(m_2p).decode())<br># CCTF&#123;5L3Ek_4s__s1lK__Ri9H7?!&#125;**<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反馈移位寄存器</title>
    <link href="/2024/03/01/%E5%8F%8D%E9%A6%88%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <url>/2024/03/01/%E5%8F%8D%E9%A6%88%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>LFSR是属于FSR（反馈移位寄存器）的一种，除了LFSR之外，还包括NFSR（非线性反馈移位寄存器）。</p><p>FSR是<strong>流密码</strong>产生<strong>密钥流</strong>的一个重要组成部分，在GF(2)上的一个<strong>n级FSR</strong>通常由<strong>n个二元存储器</strong>和<strong>一个反馈函数</strong>组成，如下图所示：</p><p><img src="https://p5.ssl.qhimg.com/t0120111c3c2c65ad47.png" alt=""></p><p>如果这里的反馈函数是<strong>线性</strong>的，我们则将其称为LFSR，此时该反馈函数可以表示为：</p><p><img src="https://p3.ssl.qhimg.com/t01e60ae90ce8d0f7da.png" alt=""></p><p>其中ci=0或1，⊕表示异或（模二加）。</p><p>我们接下来通过一个例子来更直观的明确LFSR的概念，假设给定一个<strong>5级</strong>的LFSR，其初始状态（即a1到a5这5个二元存储器的值）为：</p><p><img src="https://p4.ssl.qhimg.com/t0136009fbc340cd9cf.png" alt=""></p><p>其反馈函数为：</p><p><img src="https://p1.ssl.qhimg.com/t017c5158f64d590cd2.png" alt=""></p><p>整个过程可以表示为下图所示的形式：</p><p><img src="https://p3.ssl.qhimg.com/t01cd58532501574579.png" alt=""></p><p>接下来我们来计算该LFSR的输出序列，输出序列的<strong>前5位</strong>即为我们的初始状态<strong>10011</strong>，<strong>第6位</strong>的计算过程如下:</p><p><img src="https://p3.ssl.qhimg.com/t019ca3ed0fa053d582.png" alt=""></p><p><strong>第7位</strong>的计算过程如下:</p><p><img src="https://p0.ssl.qhimg.com/t01ca7d030e872490ec.png" alt=""></p><p>由此类推，可以得到<strong>前31位</strong>的计算结果如下：</p><p><code>1001101001000010101110110001111</code></p><p>对于一个n级的LFSR来讲，其<strong>最大周期</strong>为2^n-1，因此对于我们上面的5级LFSR来讲，其<strong>最大周期</strong>为2^5-1=31，再后面的输出序列即为前31位的循环。</p><p>2018 CISCN 线上赛 oldstreamgame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&quot;flag&#123;xxxxxxxxxxxxxxxx&#125;&quot;</span><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;flag&#123;&quot;</span>)<br><span class="hljs-keyword">assert</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">14</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit <br>    <span class="hljs-keyword">return</span> (output,lastbit)<br><br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>mask = <span class="hljs-number">0b10100100000010000000100010010100</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp))<br>f.close()<br></code></pre></td></tr></table></figure><p>分析一下我们的已知条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">已知初始状态的长度为4个十六进制数，即32位，初始状态的值即我们要去求的flag。<br>已知反馈函数，只不过这里的反馈函数是代码的形式，我们需要提取出它的数学表达式。<br>已知输出序列。<br></code></pre></td></tr></table></figure><p>那么我们的任务很明确，就是通过分析lfsr函数，整理成数学表达式的形式求解即可，接下来我们一行一行的来分析这个函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">#接收两个参数，R是<span class="hljs-number">32</span>位的初始状态(即flag)，<span class="hljs-attribute">mask</span>是<span class="hljs-number">32</span>位的掩码，由于<span class="hljs-attribute">mask</span>已知，所以我们就直接把他当做一个常数即可。<br>def <span class="hljs-built_in">lfsr</span>(R,mask):<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#把R左移一位后低32位（即抹去R的最高位，然后在R的最低位补0）的值赋给output变量。</span><br>    <span class="hljs-attr">output</span> = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0</span>xffffffff<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#把传入的R和mask做按位与运算，运算结果取低32位，将该值赋给i变量。</span><br>    <span class="hljs-attr">i</span>=(R&amp;mask)&amp;<span class="hljs-number">0</span>xffffffff<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#从i的最低位向i的最高位依次做异或运算，将运算结果赋给lastbit变量。</span><br>    lastbit=0<br>    <span class="hljs-keyword">while</span> i!=0:<br>        lastbit^=(i&amp;1)<br>        i=i&gt;&gt;1<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`i&amp;<span class="hljs-number">1</span>` 是一个位与运算操作，用来提取一个数 `i` 的二进制表示中的最后一位（即最低位）。在这个操作中，`&amp;` 是位与运算符，`1` 是一个只有最低位为 <span class="hljs-number">1</span>，其他位均为 <span class="hljs-number">0</span> 的数。当对 `i` 进行与运算时，只有 `i` 的最后一位与 `1` 的最后一位相与，结果为 `1`（如果 `i` 的最后一位是 <span class="hljs-number">1</span>）或 `0`（如果 `i` 的最后一位是 <span class="hljs-number">0</span>）。<br><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">#将<span class="hljs-built_in">output</span>变量的最后一位设置成lastbit变量的值。<br>    <span class="hljs-built_in">output</span>^=lastbit<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">#返回<span class="hljs-built_in">output</span>变量和lastbit变量的值，<span class="hljs-built_in">output</span>即经过一轮lfsr之后的新序列，lastbit即经过一轮lfsr之后输出的一位。<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">output</span>,lastbit)<br></code></pre></td></tr></table></figure><p>通过上面的分析，我们可以看出在这道题的情境下，lfsr函数本质上就是一个<strong>输入R输出lastbit的函数</strong>，虽然我们现在已经清楚了<strong>R是如何经过一系列运算得到lastbit</strong>的，但是我们前面的反馈函数都是<strong>数学表达式</strong>的形式，我们能否将上述过程整理成一个表达式的形式呢？这就需要我们再进一步进行分析：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">mask</span>只有第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位为<span class="hljs-number">1</span>，其余位均为<span class="hljs-number">0</span>。<br><span class="hljs-attribute">mask</span>与R做按位与运算得到<span class="hljs-selector-tag">i</span>，当且仅当R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位中也出现<span class="hljs-number">1</span>时，<span class="hljs-selector-tag">i</span>中才可能出现<span class="hljs-number">1</span>，否则<span class="hljs-selector-tag">i</span>中将全为<span class="hljs-number">0</span>。<br>lastbit是由<span class="hljs-selector-tag">i</span>的最低位向<span class="hljs-selector-tag">i</span>的最高位依次做异或运算得到的，在这个过程中，所有为<span class="hljs-number">0</span>的位我们可以忽略不计（因为<span class="hljs-number">0</span>异或任何数等于任何数本身，不影响最后运算结果），因此lastbit的值仅取决于<span class="hljs-selector-tag">i</span>中有多少个<span class="hljs-number">1</span>：当<span class="hljs-selector-tag">i</span>中有奇数个<span class="hljs-number">1</span>时，lastbit等于<span class="hljs-number">1</span>；当<span class="hljs-selector-tag">i</span>中有偶数个<span class="hljs-number">1</span>时，lastbit等于<span class="hljs-number">0</span>。<br>当R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位依次异或结果为<span class="hljs-number">1</span>时，即R中有奇数个<span class="hljs-number">1</span>，因此将导致<span class="hljs-selector-tag">i</span>中有奇数个<span class="hljs-number">1</span>；当R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位依次异或结果为<span class="hljs-number">0</span>时，即R中有偶数个<span class="hljs-number">1</span>，因此将导致<span class="hljs-selector-tag">i</span>中有偶数个<span class="hljs-number">1</span>。<br>因此我们可以建立出联系：lastbit等于R的第<span class="hljs-number">3</span>、<span class="hljs-number">5</span>、<span class="hljs-number">8</span>、<span class="hljs-number">12</span>、<span class="hljs-number">20</span>、<span class="hljs-number">27</span>、<span class="hljs-number">30</span>、<span class="hljs-number">32</span>这几位依次异或的结果。<br></code></pre></td></tr></table></figure><p>将其写成数学表示式的形式，即为：</p><p><img src="https://p3.ssl.qhimg.com/t01146bab15730cbd30.png" alt=""></p><p>显然，lastbit和R之间满足线性关系，那么接下来我们就可以开始求解了：</p><p>我们想象这样一个场景，当即将输出第32位lastbit时，此时R已经左移了31位，根据上面的数学表达式，我们有：</p><p><img src="https://p2.ssl.qhimg.com/t0100384766078bfda8.png" alt=""></p><p>这样我们就可以求出R的第1位，同样的方法，我们可以求出R的第2位：</p><p><img src="https://p4.ssl.qhimg.com/t01ef3d957b4726b14c.png" alt=""></p><p>以此类推，R的全部32位我们都可以依次求出了，将这一计算过程写成代码形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">mask = <span class="hljs-string">&#x27;10100100000010000000100010010100&#x27;</span><br>key = <span class="hljs-string">&#x27;00100000111111011110111011111000&#x27;</span><br>tmp = key<br>R= <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    output = <span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>    ans = <span class="hljs-built_in">int</span>(tmp[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">3</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">5</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">12</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">20</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">27</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">30</span>])<br>    R+=<span class="hljs-built_in">str</span>(ans)<br>    key = <span class="hljs-built_in">str</span>(ans)+key[:<span class="hljs-number">31</span>]<br>R= <span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(R[::-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;x&#x27;</span>)<br>flag = <span class="hljs-string">&#x27;flag&#123;&#x27;</span>+R+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag{926201d7}</p><h2 id="2018-強網杯-Streamgame2"><a href="#2018-強網杯-Streamgame2" class="headerlink" title="2018 強網杯 Streamgame2"></a>2018 強網杯 Streamgame2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;flag&#123;&quot;</span>)<br><span class="hljs-keyword">assert</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">27</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br><br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)<br>mask=<span class="hljs-number">0x100002</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;ab&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp))<br>f.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#bin_out = open(&#x27;key.txt&#x27;,&#x27;rb&#x27;).read()</span><br><span class="hljs-comment">#key = bin(bytes_to_long(bin_out))[2:]</span><br><br>key = <span class="hljs-string">&#x27;101100101110100100001&#x27;</span><br>mask= <span class="hljs-string">&#x27;100000000000000000010&#x27;</span><br><br>R = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>    output = <span class="hljs-string">&#x27;?&#x27;</span> + key[:<span class="hljs-number">20</span>]<br>    ans = <span class="hljs-built_in">int</span>(key[-<span class="hljs-number">1</span>]) ^ <span class="hljs-built_in">int</span>(output[-<span class="hljs-number">2</span>])<br>    R += <span class="hljs-built_in">str</span>(ans)<br>    key = <span class="hljs-built_in">str</span>(ans) + key[:<span class="hljs-number">20</span>]<br><br><span class="hljs-built_in">print</span>(R[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
